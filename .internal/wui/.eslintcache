[{"/usr/iotstack_wui/src/index.js":"1","/usr/iotstack_wui/src/App.js":"2","/usr/iotstack_wui/src/reducers/index.js":"3","/usr/iotstack_wui/src/router.jsx":"4","/usr/iotstack_wui/src/reducers/counter.js":"5","/usr/iotstack_wui/src/reducers/getServiceTemplateListReducer.js":"6","/usr/iotstack_wui/src/reducers/getServiceTemplatesReducer.js":"7","/usr/iotstack_wui/src/reducers/getNetworkTemplateListReducer.js":"8","/usr/iotstack_wui/src/reducers/getServiceMetadataReducer.js":"9","/usr/iotstack_wui/src/reducers/getAllServicesMetadataReducer.js":"10","/usr/iotstack_wui/src/reducers/getServiceConfigOptionsReducer.js":"11","/usr/iotstack_wui/src/reducers/getAllServicesConfigOptionsReducer.js":"12","/usr/iotstack_wui/src/reducers/updateSelectedServicesReducer.js":"13","/usr/iotstack_wui/src/reducers/updateSelectedFilterTagsReducer.js":"14","/usr/iotstack_wui/src/reducers/getBuildIssuesReducer.js":"15","/usr/iotstack_wui/src/reducers/buildStackReducer.js":"16","/usr/iotstack_wui/src/reducers/getBuildHistoryListReducer.js":"17","/usr/iotstack_wui/src/reducers/getScriptTemplatesReducer.js":"18","/usr/iotstack_wui/src/reducers/middlewares/promiseMiddleware.js":"19","/usr/iotstack_wui/src/reducers/middlewares/asyncDispatchMiddleware.js":"20","/usr/iotstack_wui/src/constants.js":"21","/usr/iotstack_wui/src/actions/getServiceTemplateList.action.js":"22","/usr/iotstack_wui/src/actions/getServiceTemplates.action.js":"23","/usr/iotstack_wui/src/actions/getNetworkTemplateList.action.js":"24","/usr/iotstack_wui/src/actions/getServiceMetadata.action.js":"25","/usr/iotstack_wui/src/actions/getAllServicesMetadata.action.js":"26","/usr/iotstack_wui/src/actions/getServiceConfigOptions.action.js":"27","/usr/iotstack_wui/src/actions/getAllServicesConfigOptions.action.js":"28","/usr/iotstack_wui/src/actions/updateSelectedServices.action.js":"29","/usr/iotstack_wui/src/actions/updateFilterTags.action.js":"30","/usr/iotstack_wui/src/actions/checkBuildIssues.action.js":"31","/usr/iotstack_wui/src/actions/buildStack.action.js":"32","/usr/iotstack_wui/src/actions/getBuildHistoryList.action.js":"33","/usr/iotstack_wui/src/actions/getScript.action.js":"34","/usr/iotstack_wui/src/pages/notFound/index.js":"35","/usr/iotstack_wui/src/features/Sidebar/index.js":"36","/usr/iotstack_wui/src/pages/mainBuild/index.jsx":"37","/usr/iotstack_wui/src/pages/buildHistory/index.jsx":"38","/usr/iotstack_wui/src/pages/scripts/index.jsx":"39","/usr/iotstack_wui/src/pages/help/index.jsx":"40","/usr/iotstack_wui/src/services/templates.js":"41","/usr/iotstack_wui/src/services/configs.js":"42","/usr/iotstack_wui/src/services/builds.js":"43","/usr/iotstack_wui/src/utils/buildOptionSync.js":"44","/usr/iotstack_wui/src/config.js":"45","/usr/iotstack_wui/src/features/servicesGridItem/index.jsx":"46","/usr/iotstack_wui/src/features/BuildSidebar/index.jsx":"47","/usr/iotstack_wui/src/features/buildHistoryGridItem/index.jsx":"48","/usr/iotstack_wui/src/actions/downloadBuild.action.js":"49","/usr/iotstack_wui/src/features/serviceConfigModal/index.jsx":"50","/usr/iotstack_wui/src/features/buildCompletedModal/index.jsx":"51","/usr/iotstack_wui/src/utils/configOptionLoader.jsx":"52","/usr/iotstack_wui/src/features/serviceUiControls/index.js":"53","/usr/iotstack_wui/src/features/serviceUiControls/custom/deconz-devices.js":"54","/usr/iotstack_wui/src/features/serviceUiControls/general/portConfig.jsx":"55","/usr/iotstack_wui/src/features/serviceUiControls/general/networkConfig.jsx":"56","/usr/iotstack_wui/src/features/serviceUiControls/general/logging.jsx":"57","/usr/iotstack_wui/src/features/serviceUiControls/general/volumesConfig.jsx":"58","/usr/iotstack_wui/src/features/serviceUiControls/general/devicesConfig.jsx":"59","/usr/iotstack_wui/src/features/serviceUiControls/general/environmentConfig.jsx":"60","/usr/iotstack_wui/src/utils/parsers.js":"61","/usr/iotstack_wui/src/features/scriptViewerModal/index.jsx":"62","/usr/iotstack_wui/src/reducers/getBuildFileReducer.js":"63","/usr/iotstack_wui/src/actions/getBuildFile.action.js":"64","/usr/iotstack_wui/src/actions/deleteBuild.action.js":"65","/usr/iotstack_wui/src/reducers/getDeleteBuildReducer.js":"66","/usr/iotstack_wui/src/features/serviceUiControls/custom/nodered-npm.js":"67"},{"size":353,"mtime":1611426633820,"results":"68","hashOfConfig":"69"},{"size":1194,"mtime":1615451493240,"results":"70","hashOfConfig":"69"},{"size":2065,"mtime":1614505601640,"results":"71","hashOfConfig":"69"},{"size":1231,"mtime":1615196347590,"results":"72","hashOfConfig":"69"},{"size":1551,"mtime":1611426633860,"results":"73","hashOfConfig":"69"},{"size":972,"mtime":1611426633850,"results":"74","hashOfConfig":"69"},{"size":962,"mtime":1611426633850,"results":"75","hashOfConfig":"69"},{"size":972,"mtime":1611426633840,"results":"76","hashOfConfig":"69"},{"size":1878,"mtime":1611426633870,"results":"77","hashOfConfig":"69"},{"size":971,"mtime":1614153303680,"results":"78","hashOfConfig":"69"},{"size":1922,"mtime":1611426633840,"results":"79","hashOfConfig":"69"},{"size":1011,"mtime":1613201638300,"results":"80","hashOfConfig":"69"},{"size":1255,"mtime":1614423070110,"results":"81","hashOfConfig":"69"},{"size":1079,"mtime":1611426633880,"results":"82","hashOfConfig":"69"},{"size":894,"mtime":1611426633870,"results":"83","hashOfConfig":"69"},{"size":1059,"mtime":1613982720390,"results":"84","hashOfConfig":"69"},{"size":947,"mtime":1611426633840,"results":"85","hashOfConfig":"69"},{"size":1714,"mtime":1611426633870,"results":"86","hashOfConfig":"69"},{"size":711,"mtime":1611426633890,"results":"87","hashOfConfig":"69"},{"size":607,"mtime":1611426633890,"results":"88","hashOfConfig":"69"},{"size":160,"mtime":1611426633820,"results":"89","hashOfConfig":"69"},{"size":369,"mtime":1611426633740,"results":"90","hashOfConfig":"69"},{"size":340,"mtime":1611426633720,"results":"91","hashOfConfig":"69"},{"size":369,"mtime":1611426633700,"results":"92","hashOfConfig":"69"},{"size":375,"mtime":1611426633720,"results":"93","hashOfConfig":"69"},{"size":366,"mtime":1613201724290,"results":"94","hashOfConfig":"69"},{"size":419,"mtime":1611426633720,"results":"95","hashOfConfig":"69"},{"size":410,"mtime":1613201736700,"results":"96","hashOfConfig":"69"},{"size":784,"mtime":1614423672770,"results":"97","hashOfConfig":"69"},{"size":540,"mtime":1611426633730,"results":"98","hashOfConfig":"69"},{"size":358,"mtime":1611426633710,"results":"99","hashOfConfig":"69"},{"size":640,"mtime":1613983903310,"results":"100","hashOfConfig":"69"},{"size":340,"mtime":1611426633710,"results":"101","hashOfConfig":"69"},{"size":390,"mtime":1611426633710,"results":"102","hashOfConfig":"69"},{"size":206,"mtime":1611426633770,"results":"103","hashOfConfig":"69"},{"size":4770,"mtime":1611426633670,"results":"104","hashOfConfig":"69"},{"size":5720,"mtime":1614423701670,"results":"105","hashOfConfig":"69"},{"size":2424,"mtime":1614505468920,"results":"106","hashOfConfig":"69"},{"size":213,"mtime":1611426633780,"results":"107","hashOfConfig":"69"},{"size":204,"mtime":1611426633760,"results":"108","hashOfConfig":"69"},{"size":5107,"mtime":1615025612290,"results":"109","hashOfConfig":"69"},{"size":4559,"mtime":1615025601340,"results":"110","hashOfConfig":"69"},{"size":8094,"mtime":1615025584890,"results":"111","hashOfConfig":"69"},{"size":2992,"mtime":1613458881750,"results":"112","hashOfConfig":"69"},{"size":175,"mtime":1615025529080,"results":"113","hashOfConfig":"69"},{"size":11102,"mtime":1614423199500,"results":"114","hashOfConfig":"69"},{"size":10810,"mtime":1613978780580,"results":"115","hashOfConfig":"69"},{"size":7454,"mtime":1614505519130,"results":"116","hashOfConfig":"69"},{"size":318,"mtime":1611426633700,"results":"117","hashOfConfig":"69"},{"size":4265,"mtime":1613292280570,"results":"118","hashOfConfig":"69"},{"size":3624,"mtime":1611426633670,"results":"119","hashOfConfig":"69"},{"size":2354,"mtime":1615366350320,"results":"120","hashOfConfig":"69"},{"size":520,"mtime":1615366176440,"results":"121","hashOfConfig":"69"},{"size":2684,"mtime":1615364560640,"results":"122","hashOfConfig":"69"},{"size":2993,"mtime":1612150221810,"results":"123","hashOfConfig":"69"},{"size":4702,"mtime":1615961276350,"results":"124","hashOfConfig":"69"},{"size":1657,"mtime":1612131016720,"results":"125","hashOfConfig":"69"},{"size":3070,"mtime":1612150262840,"results":"126","hashOfConfig":"69"},{"size":2664,"mtime":1613114342660,"results":"127","hashOfConfig":"69"},{"size":3773,"mtime":1616052377060,"results":"128","hashOfConfig":"69"},{"size":2977,"mtime":1612602317250,"results":"129","hashOfConfig":"69"},{"size":2964,"mtime":1614418062220,"results":"130","hashOfConfig":"69"},{"size":2304,"mtime":1614153419000,"results":"131","hashOfConfig":"69"},{"size":328,"mtime":1614153030352,"results":"132","hashOfConfig":"69"},{"size":466,"mtime":1614505217850,"results":"133","hashOfConfig":"69"},{"size":989,"mtime":1614505633760,"results":"134","hashOfConfig":"69"},{"size":5467,"mtime":1615529967980,"results":"135","hashOfConfig":"69"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},"ee6855",{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"138"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"138"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"138"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"138"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"138"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"138"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"138"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"138"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"138"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"138"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"138"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"138"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"138"},"/usr/iotstack_wui/src/index.js",[],["284","285"],"/usr/iotstack_wui/src/App.js",[],"/usr/iotstack_wui/src/reducers/index.js",[],"/usr/iotstack_wui/src/router.jsx",[],"/usr/iotstack_wui/src/reducers/counter.js",[],"/usr/iotstack_wui/src/reducers/getServiceTemplateListReducer.js",[],"/usr/iotstack_wui/src/reducers/getServiceTemplatesReducer.js",[],"/usr/iotstack_wui/src/reducers/getNetworkTemplateListReducer.js",[],"/usr/iotstack_wui/src/reducers/getServiceMetadataReducer.js",[],"/usr/iotstack_wui/src/reducers/getAllServicesMetadataReducer.js",[],"/usr/iotstack_wui/src/reducers/getServiceConfigOptionsReducer.js",[],"/usr/iotstack_wui/src/reducers/getAllServicesConfigOptionsReducer.js",[],"/usr/iotstack_wui/src/reducers/updateSelectedServicesReducer.js",[],"/usr/iotstack_wui/src/reducers/updateSelectedFilterTagsReducer.js",[],"/usr/iotstack_wui/src/reducers/getBuildIssuesReducer.js",[],"/usr/iotstack_wui/src/reducers/buildStackReducer.js",[],"/usr/iotstack_wui/src/reducers/getBuildHistoryListReducer.js",[],"/usr/iotstack_wui/src/reducers/getScriptTemplatesReducer.js",[],"/usr/iotstack_wui/src/reducers/middlewares/promiseMiddleware.js",[],"/usr/iotstack_wui/src/reducers/middlewares/asyncDispatchMiddleware.js",[],"/usr/iotstack_wui/src/constants.js",[],"/usr/iotstack_wui/src/actions/getServiceTemplateList.action.js",[],"/usr/iotstack_wui/src/actions/getServiceTemplates.action.js",[],"/usr/iotstack_wui/src/actions/getNetworkTemplateList.action.js",[],"/usr/iotstack_wui/src/actions/getServiceMetadata.action.js",[],"/usr/iotstack_wui/src/actions/getAllServicesMetadata.action.js",[],"/usr/iotstack_wui/src/actions/getServiceConfigOptions.action.js",[],"/usr/iotstack_wui/src/actions/getAllServicesConfigOptions.action.js",[],"/usr/iotstack_wui/src/actions/updateSelectedServices.action.js",[],"/usr/iotstack_wui/src/actions/updateFilterTags.action.js",[],"/usr/iotstack_wui/src/actions/checkBuildIssues.action.js",[],"/usr/iotstack_wui/src/actions/buildStack.action.js",[],"/usr/iotstack_wui/src/actions/getBuildHistoryList.action.js",[],"/usr/iotstack_wui/src/actions/getScript.action.js",[],"/usr/iotstack_wui/src/pages/notFound/index.js",[],"/usr/iotstack_wui/src/features/Sidebar/index.js",[],"/usr/iotstack_wui/src/pages/mainBuild/index.jsx",["286","287","288","289"],"// import React, { Fragment, useState, useEffect } from 'react';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport ServiceGridItem from '../../features/servicesGridItem';\nimport BuildSidebar from '../../features/BuildSidebar';\nimport { getServiceTemplateListAction } from '../../actions/getServiceTemplateList.action';\nimport { getServiceTemplatesAction } from '../../actions/getServiceTemplates.action';\nimport { getNetworkTemplateListAction } from '../../actions/getNetworkTemplateList.action';\nimport { getAllServicesConfigOptionsAction } from '../../actions/getAllServicesConfigOptions.action';\nimport { getAllServicesMetadataAction } from '../../actions/getAllServicesMetadata.action';\nimport {\n  getBuildOptions,\n  setBuildOptions,\n  buildOptionsInit,\n  setServiceOptions,\n  setTemporaryBuildOptions,\n  getTemporaryBuildOptions,\n  setTemporaryServiceOptions,\n  setupTemporaryBuildOptions,\n  saveTemporaryBuildOptions,\n  getSelectedItems_services\n} from '../../utils/buildOptionSync';\nimport {\n  addSelectedService,\n  clearAllSelectedServicesAction\n} from '../../actions/updateSelectedServices.action';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchGetServiceTemplatesList: () => dispatch(getServiceTemplateListAction()),\n    dispatchGetServiceTemplatesList: () => dispatch(getServiceTemplateListAction()),\n    dispatchGetNetworkTemplatesList: () => dispatch(getNetworkTemplateListAction()),\n    dispatchGetServiceTemplates: () => dispatch(getServiceTemplatesAction()),\n    dispatchGetAllServicesMetadata: () => dispatch(getAllServicesMetadataAction()),\n    dispatchAddSelectedService: (serviceName) => dispatch(addSelectedService(serviceName)),\n    dispatchGetAllServicesConfigOptions: () => dispatch(getAllServicesConfigOptionsAction()),\n    dispatchClearAllSelectedServices: () => dispatch(clearAllSelectedServicesAction())\n  };\n};\n\nconst mapStateToProps = (selector) => {\n  return {\n    serviceTemplateList: selector(state => state.serviceTemplateList),\n    networkTemplateList: selector(state => state.networkTemplateList),\n    serviceTemplates: selector(state => state.serviceTemplates),\n    allServicesConfigOptionsReducer: selector(state => state.allServicesConfigOptionsReducer),\n    selectedServices: selector(state => state.selectedServices),\n    allServicesMetadataReducer: selector(state => state.allServicesMetadataReducer)\n  };\n};\n\nconst Main = (props) => {\n  props = {\n    ...props,\n    ...mapDispatchToProps(useDispatch()),\n    ...mapStateToProps(useSelector)\n  };\n\n  const {\n    dispatchGetServiceTemplatesList,\n    dispatchAddSelectedService,\n    dispatchClearAllSelectedServices,\n    dispatchGetNetworkTemplatesList,\n    dispatchGetServiceTemplates,\n    dispatchGetAllServicesMetadata,\n    dispatchGetAllServicesConfigOptions,\n    allServicesConfigOptionsReducer,\n    allServicesMetadataReducer,\n    serviceTemplateList,\n    networkTemplateList,\n    serviceTemplates,\n    selectedServices\n  } = props;\n  const [isLoading, setIsLoading] = useState(true);\n  const buildOptions = getBuildOptions();\n\n  useEffect(() => {\n    dispatchGetServiceTemplatesList();\n    dispatchGetNetworkTemplatesList();\n    dispatchGetServiceTemplates();\n    dispatchGetAllServicesMetadata();\n    dispatchGetAllServicesConfigOptions();\n\n    dispatchClearAllSelectedServices();\n  }, []);\n\n  useEffect(() => {\n    if (isLoading) {\n      setIsLoading(false)\n      const savedSelectedServices = getSelectedItems_services();\n      savedSelectedServices.map((service) => {\n        dispatchAddSelectedService(service);\n      });\n    }\n  }, [selectedServices]);\n\n  return (\n    <Fragment>\n      <div  style={{ width: '100%' }}>\n        <Box display=\"flex\" p={1}>\n          <Box p={1} flexGrow={1}>\n            <Grid\n              container\n              justify=\"center\"\n            >\n              {Array.isArray(serviceTemplateList.payload) && serviceTemplateList.payload.map((templateName) => {\n                return (\n                  <Grid item\n                    key={templateName}\n                    display=\"flex\"\n                  >\n                    <ServiceGridItem\n                      serviceName={templateName}\n                      allServicesConfigOptionsReducer={allServicesConfigOptionsReducer}\n                      allServicesMetadataReducer={allServicesMetadataReducer}\n                      buildOptions={buildOptions}\n                      setBuildOptions={setBuildOptions}\n                      setServiceOptions={setServiceOptions}\n                      getBuildOptions={getBuildOptions}\n                      buildOptionsInit={buildOptionsInit}\n                      setTemporaryBuildOptions={setTemporaryBuildOptions}\n                      getTemporaryBuildOptions={getTemporaryBuildOptions}\n                      setTemporaryServiceOptions={setTemporaryServiceOptions}\n                      setupTemporaryBuildOptions={setupTemporaryBuildOptions}\n                      saveTemporaryBuildOptions={saveTemporaryBuildOptions}\n                      networkTemplateList={networkTemplateList}\n                      serviceTemplates={serviceTemplates?.payload ?? {}}\n                    />\n                  </Grid>\n                );\n              })}\n          </Grid>\n          </Box>\n          <Box p={1}>\n            <BuildSidebar\n              serviceTemplateList={serviceTemplateList}\n              networkTemplateList={networkTemplateList}\n              serviceTemplates={serviceTemplates?.payload ?? {}}\n            />\n          </Box>\n        </Box>\n\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Main;\n","/usr/iotstack_wui/src/pages/buildHistory/index.jsx",["290","291","292","293"],"// import React, { Fragment, useState, useEffect } from 'react';\nimport React, { Fragment, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Grid from '@material-ui/core/Grid';\nimport BuildHistoryGridItem from '../../features/buildHistoryGridItem'\nimport {\n  getBuildHistoryListAction\n} from '../../actions/getBuildHistoryList.action';\n\nimport {\n  clearBuildStateAction\n} from '../../actions/buildStack.action';\n\nimport {\n  downloadBuildFile\n} from '../../actions/downloadBuild.action';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchGetBuildHistoryList: () => dispatch(getBuildHistoryListAction()),\n    dispatchClearBuildState: () => dispatch(clearBuildStateAction()),\n    dispatchDownloadBuildFile: ({ build, type, linkRef }) => dispatch(downloadBuildFile({ build, type, linkRef }))\n  };\n};\n\nconst mapStateToProps = (selector) => {\n  return {\n    buildHistory: selector(state => state.buildHistory),\n    deleteBuild: selector(state => state.deleteBuild)\n  };\n};\n\nconst Main = (props) => {\n  const downloadLinkRef = React.useRef(null);\n  props = {\n    ...props,\n    ...mapDispatchToProps(useDispatch()),\n    ...mapStateToProps(useSelector)\n  };\n\n  const {\n    dispatchGetBuildHistoryList,\n    dispatchClearBuildState,\n    dispatchDownloadBuildFile,\n    buildHistory,\n    deleteBuild\n  } = props;\n\n  useEffect(() => {\n    dispatchGetBuildHistoryList();\n    dispatchClearBuildState();\n  }, []);\n\n  useEffect(() => {\n    dispatchGetBuildHistoryList();\n  }, [deleteBuild]);\n\n  return (\n    <Fragment>\n      <a ref={downloadLinkRef} />\n      <div className=\"BuildHistoryPage\">\n        <Grid\n          container\n          spacing={4}\n          justify=\"center\"\n        >\n          {typeof buildHistory.payload !== 'undefined' && Object.keys(buildHistory.payload.buildsList).map((buildDetailsTime) => {\n            return (\n              <Grid item\n                key={buildDetailsTime}\n                display=\"flex\"\n              >\n                <BuildHistoryGridItem\n                  dispatchDownloadBuildFile={dispatchDownloadBuildFile}\n                  downloadLinkRef={downloadLinkRef}\n                  buildTime={buildDetailsTime}\n                  buildDetails={buildHistory.payload.buildsList[buildDetailsTime]}\n                />\n              </Grid>\n            );\n          })}\n        </Grid>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Main;\n","/usr/iotstack_wui/src/pages/scripts/index.jsx",[],"/usr/iotstack_wui/src/pages/help/index.jsx",[],"/usr/iotstack_wui/src/services/templates.js",[],"/usr/iotstack_wui/src/services/configs.js",[],"/usr/iotstack_wui/src/services/builds.js",[],"/usr/iotstack_wui/src/utils/buildOptionSync.js",[],"/usr/iotstack_wui/src/config.js",[],"/usr/iotstack_wui/src/features/servicesGridItem/index.jsx",["294","295","296"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport Link from '@material-ui/core/Link';\nimport ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ServiceConfigModal from '../serviceConfigModal';\nimport { useTheme } from '@material-ui/core/styles';\nimport { API_STATUS } from '../../constants'\nimport {\n  getBuildIssuesAction\n} from '../../actions/checkBuildIssues.action';\nimport {\n  getServiceMetadataAction\n} from '../../actions/getServiceMetadata.action';\nimport {\n  getServiceConfigOptionsAction\n} from '../../actions/getServiceConfigOptions.action';\nimport {\n  addSelectedService,\n  removeSelectedService\n} from '../../actions/updateSelectedServices.action';\nimport {\n  getSelectedItems_services,\n  setSelectedItems_services\n} from '../../utils/buildOptionSync';\nimport styles from './services-grid-item.module.css';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchGetServiceMetadata: (serviceName) => dispatch(getServiceMetadataAction(serviceName)),\n    dispatchGetServiceConfigOptions: (serviceName) => dispatch(getServiceConfigOptionsAction(serviceName)),\n    dispatchGetBuildIssues: (selectedServices, serviceConfigurations) => dispatch(getBuildIssuesAction(selectedServices, serviceConfigurations)),\n    dispatchAddSelectedService: (serviceName) => dispatch(addSelectedService(serviceName)),\n    dispatchRemoveSelectedService: (serviceName) => dispatch(removeSelectedService(serviceName))\n  };\n};\n\nconst mapStateToProps = (selector) => {\n  return {\n    templateList: selector(state => state.templateList),\n    hideServiceTags: selector(state => state.hideServiceTags),\n    selectedServices: selector(state => state.selectedServices),\n    buildIssues: selector(state => state.buildIssues)\n  };\n};\n\nconst useStyles = makeStyles({\n  serviceCard: {\n    \"&:hover\": {\n      borderColor: ({ theme }) => theme.palette.text.primary\n    }\n  }\n});\n\nconst ServiceItem = (props) => {\n  const theme = useTheme();\n  const classes = useStyles({ props, theme });\n  // console.log('theme.palette', theme.palette)\n  props = {\n    ...props,\n    ...mapDispatchToProps(useDispatch()),\n    ...mapStateToProps(useSelector)\n  };\n\n  const {\n    serviceName,\n    networkTemplateList,\n    serviceTemplates,\n    dispatchAddSelectedService,\n    dispatchRemoveSelectedService,\n    dispatchGetBuildIssues,\n    selectedServices,\n    hideServiceTags,\n    buildIssues,\n    buildOptions,\n    setBuildOptions,\n    getBuildOptions,\n    buildOptionsInit,\n    setServiceOptions,\n    setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    setupTemporaryBuildOptions,\n    saveTemporaryBuildOptions,\n    allServicesMetadataReducer,\n    allServicesConfigOptionsReducer\n  } = props;\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [serviceMetadata, setServiceMetadata] = useState({});\n  const [serviceConfigOptions, setServiceConfigOptions] = useState({});\n  const [serviceLoadError, setServiceLoadError] = useState({});\n  useEffect(() => {\n    // const savedSelectedServices = getSelectedItems_services();\n    setSelectedItems_services(selectedServices.selectedServices);\n  }, [selectedServices]);\n  \n  useEffect(() => {\n    if (\n      allServicesMetadataReducer.status === API_STATUS.SUCCESS\n      && allServicesConfigOptionsReducer.status === API_STATUS.SUCCESS\n    ) {\n      if (\n        !(\n          (allServicesMetadataReducer?.payload?.[serviceName] ?? false)\n          && (allServicesConfigOptionsReducer?.payload?.[serviceName] ?? false)\n        )\n      ) {\n        setServiceLoadError(true);\n        setIsLoading(false);\n        return null;\n      }\n      setServiceMetadata(allServicesMetadataReducer?.payload?.[serviceName]);\n      setServiceConfigOptions(allServicesConfigOptionsReducer?.payload?.[serviceName]);\n      setIsLoading(false);\n      return null;\n    }\n\n    setIsLoading(false);\n\n    if (\n      allServicesMetadataReducer.status === API_STATUS.FAILURE\n      && allServicesConfigOptionsReducer.status === API_STATUS.FAILURE\n    ) {\n      setIsLoading(false);\n      setServiceLoadError(true);\n      return null;\n    }\n  }, [\n    allServicesMetadataReducer,\n    allServicesConfigOptionsReducer\n  ]);\n\n  const [updated, setIsUpdated] = useState(false);\n  useEffect(() => {\n    if (updated) {\n      dispatchGetBuildIssues(selectedServices.selectedServices, getBuildOptions());\n    }\n    setIsUpdated(false);\n  }, [\n    updated,\n    serviceName,\n    selectedServices.selectedServices,\n    dispatchGetBuildIssues\n  ]);\n\n  const [hasIssue, setHasIssue] = useState(false);\n  useEffect(() => {\n    if (!selectedServices.selectedServices.includes(serviceName)) {\n      return void setHasIssue(false);\n    }\n    const issueList = buildIssues?.payload?.issueList ?? {};\n    if (Array.isArray(issueList.services)) {\n      let issueFound = false;\n      issueList.services.forEach((service) => {\n        if (service.name === serviceName) {\n          issueFound = true;\n        }\n      });\n      return void setHasIssue(issueFound);\n    }\n  }, [buildIssues, selectedServices.selectedServices, serviceName]);\n\n  const handleBuildSelectChange = (evt) => {\n    setIsUpdated(true);\n    if (evt.target.checked) {\n      return dispatchAddSelectedService(serviceName);\n    }\n    return dispatchRemoveSelectedService(serviceName);\n  }\n\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const serviceComponent = () => {\n    return (\n      <Box\n        p={1}\n        m={1}\n        justifyContent=\"center\"\n      >\n        <ServiceConfigModal\n          isOpen={modalOpen}\n          handleClose={() => {\n            setModalOpen(false);\n            dispatchGetBuildIssues(selectedServices.selectedServices, getBuildOptions());\n          }}\n          serviceMetadata={serviceMetadata}\n          serviceConfigOptions={serviceConfigOptions}\n          serviceName={serviceName}\n          buildOptions={buildOptions}\n          setBuildOptions={setBuildOptions}\n          setServiceOptions={setServiceOptions}\n          getBuildOptions={getBuildOptions}\n          buildOptionsInit={buildOptionsInit}\n          setTemporaryBuildOptions={setTemporaryBuildOptions}\n          getTemporaryBuildOptions={getTemporaryBuildOptions}\n          setTemporaryServiceOptions={setTemporaryServiceOptions}\n          setupTemporaryBuildOptions={setupTemporaryBuildOptions}\n          saveTemporaryBuildOptions={saveTemporaryBuildOptions}\n          networkTemplateList={networkTemplateList}\n          serviceTemplates={serviceTemplates}\n        />\n        <Box\n          display=\"flex\"\n          p={1}\n          justifyContent=\"center\"\n          className={`${styles.serviceName}`}\n        >\n          {serviceMetadata.displayName}\n        </Box>\n        <Box display=\"flex\" p={1} justifyContent=\"center\">\n          {!serviceMetadata.iconUri\n          && (\n            <Tooltip title=\"Service icon not provided in config\">\n              <ErrorOutlineOutlinedIcon style={{ fontSize: '6rem' }} />\n            </Tooltip>\n          )}\n          {serviceMetadata.iconUri\n          && (\n            <Tooltip title={`${serviceMetadata.displayName} icon`}>\n              <div className={styles.serviceIconContainer}>\n                <img className={styles.serviceIcon} src={serviceMetadata.iconUri} alt={`${serviceMetadata.displayName} icon`} />\n              </div>\n            </Tooltip>\n          )}\n        </Box>\n        <Box display=\"flex\" p={1} m={1} justifyContent=\"center\">\n          <Button\n            variant=\"contained\"\n            onClick={() => { setTemporaryBuildOptions(buildOptions); setModalOpen(true); }}\n            className={`${styles.configButton}`}\n          >\n            {serviceMetadata.displayName} Configuration\n          </Button>\n        </Box>\n        <Box display=\"flex\" p={1} justifyContent=\"center\">\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={selectedServices.selectedServices.includes(serviceName)}\n                onChange={handleBuildSelectChange}\n                name={`chkBuild${serviceName}`}\n                color=\"primary\"\n              />\n            }\n            label={`Add ${serviceMetadata.displayName} to build`}\n          />\n        </Box>\n        <Box display=\"flex\" m={1} justifyContent=\"center\">\n          <Link\n            href=\"#\"\n            rel=\"noopener\"\n            target=\"_blank\"\n            className={styles.docsLink}\n            color=\"inherit\"\n          >\n            {serviceMetadata.displayName} Help and Docs\n          </Link>\n        </Box>\n      </Box>\n    )\n  };\n\n  const errorComponent = () => {\n    return (\n      <Fragment>\n        <div>Error loading: {serviceName}</div>\n        <div>Try refreshing, and ensuring the API server is running correctly.</div>\n      </Fragment>\n    )\n  };\n\n  const loadingComponent = () => {\n    return (\n      <Fragment>\n        Loading '{serviceName}' metadata...\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Skeleton height={'6rem'} width={'80%'} variant=\"text\" />\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\" m={1} p={1} >\n          <Skeleton variant=\"circle\" width={120} height={120} />\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Skeleton height={'3rem'} width={'70%'} variant=\"text\" />\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Skeleton height={'4rem'} width={'90%'} variant=\"text\" />\n        </Box>\n      </Fragment>\n    )\n  };\n\n  const highlightClass = () => {\n    if (selectedServices.selectedServices.includes(serviceName)) {\n      if (hasIssue) {\n        return styles.serviceError;\n      } else {\n        return styles.selectedForBuild;\n      }\n    }\n\n    return '';\n  };\n\n  const tagIsHidden = (hiddenTags, serviceTags) => {\n    let hide = false;\n\n    hiddenTags.forEach((hiddenTag) => {\n      serviceTags.forEach((serviceTag) => {\n        if (hiddenTag === serviceTag) {\n          hide = true;\n        }\n      });\n    });\n\n    return hide;\n  }\n\n  if (!isLoading && tagIsHidden(hideServiceTags.hideServiceTags, serviceMetadata.serviceTypeTags)) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      <Box\n        className={`${styles.serviceCard} ${classes.serviceCard} ${highlightClass()}`}\n        borderRadius=\"borderRadius\"\n        borderColor=\"primary.main\"\n        margin={1}\n        border={1}\n      >\n        {isLoading\n        && (loadingComponent())}\n        {!isLoading\n        && serviceMetadata.displayName\n        && (\n          serviceComponent()\n        )}\n        {!isLoading\n        && serviceLoadError === true\n        && (\n          errorComponent()\n        )}\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default ServiceItem;\n","/usr/iotstack_wui/src/features/BuildSidebar/index.jsx",["297","298"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Box from '@material-ui/core/Box';\n// import Tooltip from '@material-ui/core/Tooltip';\nimport Button from '@material-ui/core/Button';\n// import ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport Divider from '@material-ui/core/Divider';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n// import { makeStyles, useTheme } from '@material-ui/core/styles';\nimport styles from './build-sidebar.module.css';\nimport {\n  addTagToHideListAction,\n  removeTagFromHideListAction\n} from '../../actions/updateFilterTags.action';\nimport {\n  createAndBuildStackAction\n} from '../../actions/buildStack.action';\nimport {\n  getScriptFromTemplateAction\n} from '../../actions/getScript.action';\nimport {\n  downloadBuildFile\n} from '../../actions/downloadBuild.action';\nimport BuildCompletedModal from '../buildCompletedModal';\nimport { API_STATUS } from '../../constants';\nimport { getBuildOptions } from '../../utils/buildOptionSync';\n\n// const useStyles = makeStyles({\n//   serviceCard: {\n//     \"&:hover\": {\n//       borderColor: ({ theme }) => theme.palette.text.primary\n//     }\n//   }\n// });\n\nconst getUniqueTagsFromTemplates = ({ serviceTemplateListPayload, metadataList }) => {\n  const tagList = [];\n  if (Array.isArray(serviceTemplateListPayload)) {\n    serviceTemplateListPayload.forEach((service) => {\n      if (Array.isArray(metadataList?.[service]?.serviceTypeTags ?? false)) {\n        metadataList[service].serviceTypeTags.forEach((tag) => {\n          if (!tagList.includes(tag)) {\n            tagList.push(tag);\n          }\n        });\n      }\n    });\n  }\n  tagList.sort();\n  return tagList;\n};\n\nconst buildIssueListItem = (name, issueType, issueText) => {\n  return (\n    <Box><strong>{name} [{issueType}]</strong> - {issueText}</Box>\n  );\n};\n\nconst buildIssuesRender = (issues) => {\n  const unknownError = !(\n    issues.payload\n    && issues.payload.issueList\n    && Array.isArray(issues.payload.issueList.services)\n    && Array.isArray(issues.payload.issueList.networks)\n    && Array.isArray(issues.payload.issueList.other)\n  );\n\n  const noIssues = (\n    !unknownError\n    && issues.payload.issueList.services.length === 0\n    && issues.payload.issueList.networks.length === 0\n    && issues.payload.issueList.other.length === 0\n  );\n\n  return (\n    <Box className={styles.section}>\n      Build Issues:\n      <Box>\n        {issues.status === API_STATUS.SUCCESS\n        && (\n          <Fragment>\n            {Array.isArray(issues?.payload?.issueList?.services)\n            && (issues?.payload?.issueList?.services?.length ?? 0) > 0\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  Services:\n                  <Box>\n                    <ul>\n                      {issues.payload.issueList.services.map((issue) => {\n                        return (\n                          <li key={`${issue.issueType}${issue.name}${issue.message}`}>\n                            {buildIssueListItem(issue.name, issue.issueType, issue.message)}\n                          </li>\n                        )\n                      })}\n                    </ul>\n                  </Box>\n                </Box>\n              </Box>\n            )}\n            {Array.isArray(issues?.payload?.issueList?.networks)\n            && (issues?.payload?.issueList?.networks?.length ?? 0) > 0\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  Networks:\n                  <Box>\n                    <ul>\n                      {(issues?.payload?.issueList?.networks ?? []).map((issue) => {\n                        return (\n                          <li key={`${issue.issueType}${issue.name}${issue.message}`}>\n                            {buildIssueListItem(issue.name, issue.issueType, issue.message)}\n                          </li>\n                        )\n                      })}\n                    </ul>\n                  </Box>\n                </Box>\n              </Box>\n            )}\n            {Array.isArray(issues?.payload?.issueList?.other)\n            && (issues?.payload?.issueList?.other?.length ?? 0) > 0\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  Other Issues:\n                  <Box>\n                    <ul>\n                      {issues.payload.issueList.other.map((issue) => {\n                        return (\n                          <li key={`${issue.issueType}${issue.name}${issue.message}`}>\n                            {buildIssueListItem(issue.name, issue.issueType, issue.message)}\n                          </li>\n                        )\n                      })}\n                    </ul>\n                  </Box>\n                </Box>\n              </Box>\n            )}\n            {noIssues\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  No build issues\n                </Box>\n              </Box>\n            )}\n            {!noIssues\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  You can still attempt to build when issues are reported.\n                </Box>\n              </Box>\n            )}\n            {unknownError\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  An unknown error occured retrieving build issues\n                </Box>\n              </Box>\n            )}\n          </Fragment>\n        )}\n        {issues.status === API_STATUS.PENDING\n        && (\n          <Fragment>Loading...</Fragment>\n        )}\n        {issues.status === API_STATUS.FAILURE\n        && (\n          <Fragment>Failed to get build issues from API</Fragment>\n        )}\n        {issues.status === API_STATUS.UNINIT\n        && (\n          <Fragment>No changes detected</Fragment>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nconst buildList = (selectedServices) => {\n  return (\n    <Box className={styles.section}>\n      Building Services:\n      <Box>\n        {selectedServices.join(', ')}\n      </Box>\n    </Box>\n  );\n};\n\nconst buildServices = (dispatchBuildStack, buildStack) => {\n  return (\n    <Box className={styles.section}>\n      Build:\n      <Box>\n        <Button variant=\"contained\" onClick={dispatchBuildStack}>Build</Button>\n      </Box>\n      {(buildStack?.status === API_STATUS.FAILURE ?? false)\n      && (\n        <Fragment>\n          <Box>Error occured when building. Please check API logs.</Box>\n          <Box>{buildStack?.error?.message ?? 'Unknown error'}</Box>\n        </Fragment>\n      )}\n    </Box>\n  );\n};\n\nconst Sidebar = (props) => {\n  // const theme = useTheme();\n  // const classes = useStyles({ props, theme });\n\n  const mapStateToProps = (selector) => {\n    return {\n      configServiceMetadata: selector(state => state.configServiceMetadata),\n      hideServiceTags: selector(state => state.hideServiceTags),\n      selectedServices: selector(state => state.selectedServices),\n      buildIssues: selector(state => state.buildIssues),\n      buildStack: selector(state => state.buildStack),\n      scriptTemplates: selector(state => state.scriptTemplates),\n      allServicesMetadataReducer: selector(state => state.allServicesMetadataReducer)\n    };\n  };\n  const mapDispatchToProps = (dispatch) => {\n    return {\n      dispatchAddTagToHideList: (tag) => dispatch(addTagToHideListAction(tag)),\n      dispatchRemoveTagFromHideList: (tag) => dispatch(removeTagFromHideListAction(tag)),\n      dispatchBuildStack: (selectedServices, serviceConfigurations) => dispatch(createAndBuildStackAction(selectedServices, serviceConfigurations)),\n      dispatchGetScriptTemplates: ({ scriptName, options, linkRef }) => dispatch(getScriptFromTemplateAction({ scriptName, options, linkRef })),\n      dispatchDownloadBuildFile: ({ build, type, linkRef }) => dispatch(downloadBuildFile({ build, type, linkRef }))\n    };\n  };\n  \n  props = {\n    ...props,\n    ...mapStateToProps(useSelector),\n    ...mapDispatchToProps(useDispatch()),\n  };\n\n  const [modalOpen, setModalOpen] = useState(false);\n  useEffect(() => {\n    if (props.buildStack.status === API_STATUS.SUCCESS) {\n      setModalOpen(true);\n    }\n  }, [\n    props.buildStack\n  ]);\n\n  const {\n    serviceTemplateList,\n    allServicesMetadataReducer,\n    selectedServices,\n    buildIssues,\n    hideServiceTags,\n    dispatchRemoveTagFromHideList,\n    dispatchAddTagToHideList,\n    dispatchBuildStack,\n    dispatchGetScriptTemplates,\n    dispatchDownloadBuildFile,\n    buildStack,\n    scriptTemplates\n  } = props;\n\n  const downloadLinkRef = React.useRef(null);\n\n  const handleBuildSelectChange = (evt, tagName) => {\n    if (evt.target.checked) {\n      return dispatchAddTagToHideList(tagName);\n    }\n    return dispatchRemoveTagFromHideList(tagName);\n  };\n\n  const serviceFilter = (serviceTemplateListPayload, servicesMetadata) => {\n    return (\n      <Box className={styles.section}>\n        Hide by tag:\n        <Box>\n          {\n            getUniqueTagsFromTemplates({ serviceTemplateListPayload, metadataList: servicesMetadata }).map((tag) => {\n              return (\n                <FormControlLabel\n                key={tag}\n                control={\n                  <Checkbox\n                    checked={hideServiceTags.hideServiceTags.indexOf(tag) > -1}\n                    onChange={(evt) => handleBuildSelectChange(evt, tag)}\n                    name=\"checkedB\"\n                    color=\"primary\"\n                  />\n                }\n                label={tag}\n              />\n              );\n            })\n          }\n        </Box>\n      </Box>\n    );\n  };\n  \n  return (\n    <Fragment>\n      <a ref={downloadLinkRef} />\n      <BuildCompletedModal\n        isOpen={modalOpen}\n        handleClose={() => setModalOpen(false)}\n        buildStack={buildStack}\n        scriptTemplates={scriptTemplates}\n        dispatchGetScriptTemplates={dispatchGetScriptTemplates}\n        dispatchDownloadBuildFile={dispatchDownloadBuildFile}\n        downloadLinkRef={downloadLinkRef}\n      />\n      <Box\n        py=\"2rem\"\n        border={1}\n        className={`${styles.sidebarWrapper}`}\n      >\n        {serviceFilter(serviceTemplateList.payload, allServicesMetadataReducer.payload)}\n        <Divider />\n        {buildIssuesRender(buildIssues)}\n        <Divider />\n        {buildList(selectedServices.selectedServices)}\n        <Divider />\n        {buildServices(() => {\n          if (Array.isArray(selectedServices.selectedServices) && selectedServices.selectedServices.length > 0) {\n            dispatchBuildStack(selectedServices.selectedServices, getBuildOptions());\n          }\n        }, buildStack)}\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default Sidebar;\n","/usr/iotstack_wui/src/features/buildHistoryGridItem/index.jsx",["299","300","301"],"import React, { Fragment, useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from \"react-redux\";\nimport Box from '@material-ui/core/Box';\n// import Tooltip from '@material-ui/core/Tooltip';\nimport Skeleton from '@material-ui/lab/Skeleton';\n// import FormControlLabel from '@material-ui/core/FormControlLabel';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import Button from '@material-ui/core/Button';\nimport Link from '@material-ui/core/Link';\nimport Button from '@material-ui/core/Button';\nimport { useDispatch, useSelector } from \"react-redux\";\n// import ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTheme } from '@material-ui/core/styles';\nimport ScriptViewerModal from '../scriptViewerModal';\nimport { getBuildFileAction } from '../../actions/getBuildFile.action';\nimport { deleteBuildAction } from '../../actions/deleteBuild.action';\nimport {\n  addSelectedService,\n  clearAllSelectedServicesAction\n} from '../../actions/updateSelectedServices.action';\nimport { setSelectedItems_services, setBuildOptions } from '../../utils/buildOptionSync';\nimport styles from './build-history-grid-item.module.css';\n\nconst useStyles = makeStyles({\n  serviceCard: {\n    \"&:hover\": {\n      borderColor: ({ theme }) => theme.palette.text.primary\n    }\n  }\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchGetBuildFile: ({ build, type, label }) => dispatch(getBuildFileAction({ build, type, label })),\n    dispatchAddSelectedService: (serviceName) => dispatch(addSelectedService(serviceName)),\n    dispatchClearAllSelectedServices: () => dispatch(clearAllSelectedServicesAction()),\n    dispatchDeleteBuild: ({ build }) => dispatch(deleteBuildAction({ build }))\n  };\n};\n\nconst mapStateToProps = (selector) => {\n  return {\n    buildFiles: selector(state => state.buildFiles)\n  };\n};\n\nconst ServiceItem = (props) => {\n  const theme = useTheme();\n  const classes = useStyles({ props, theme });\n\n  props = {\n    ...props,\n    ...mapDispatchToProps(useDispatch()),\n    ...mapStateToProps(useSelector)\n  };\n  const {\n    dispatchAddSelectedService,\n    dispatchClearAllSelectedServices,\n    dispatchGetBuildFile,\n    dispatchDeleteBuild,\n    buildTime,\n    dispatchDownloadBuildFile,\n    downloadLinkRef,\n    buildFiles\n  } = props;\n\n  const [scriptViewerModalOpen, setScriptViewerModalOpen] = useState(false);\n  const [loadableScriptOptions, setLoadableScriptOptions] = useState(false);\n  const [displayScript, setDisplayScript] = useState('Loading...');\n\n  useEffect(() => {\n    const downloadedScript = buildFiles?.files?.completed?.[buildTime]?.payload;\n    if (downloadedScript) {\n      setDisplayScript(downloadedScript);\n      setScriptViewerModalOpen(true);\n    }\n  }, [buildFiles?.files?.completed?.[buildTime]?.status]);\n\n  let isLoading = false;\n  let buildHistoryError = {\n    hasError: false\n  };\n\n  const loadBuild = (modalProps) => {\n    const buildConfig = JSON.parse(modalProps.displayScript);\n  \n    setSelectedItems_services(buildConfig.selectedServices);\n    setBuildOptions(buildConfig.serviceConfigurations);\n    dispatchClearAllSelectedServices();\n    buildConfig?.selectedServices?.map((service) => {\n      dispatchAddSelectedService(service);\n    });\n\n    setScriptViewerModalOpen(false);\n  };\n  \n  const buildHistoryComponent = () => {\n    return (\n      <Box\n        p={1}\n        m={1}\n        justifyContent=\"center\"\n      >\n        <Box display=\"flex\" p={1} justifyContent=\"center\" fontSize=\"2rem\">{buildTime}</Box>\n        <Box display=\"flex\" p={1} pb={2} justifyContent=\"center\">\n          <Link\n            href=\"#\"\n            onClick={() => {\n              return dispatchDownloadBuildFile({ build: buildTime, type: 'zip', linkRef: downloadLinkRef });\n            }}\n            rel=\"noopener\"\n            target=\"_blank\"\n            className={styles.docsLink}\n            color=\"inherit\"\n          >\n            Download Zip\n          </Link>\n        </Box>\n        <Box display=\"flex\" p={2} justifyContent=\"center\" flexWrap=\"wrap\">\n          <Button\n            variant=\"contained\"\n            className={styles.docsLink}\n            style={{ textTransform: 'none' }}\n            color=\"inherit\"\n            onClick={() => {\n              setLoadableScriptOptions(true);\n              return dispatchGetBuildFile({ build: buildTime, type: 'json', label: buildTime });\n              // return setScriptViewerModalOpen(true);\n            }}\n          >\n            Load this build\n          </Button>\n        </Box>\n        <Box display=\"flex\" p={2} justifyContent=\"center\" flexWrap=\"wrap\">\n          <Button\n            variant=\"contained\"\n            className={styles.docsLink}\n            style={{ textTransform: 'none' }}\n            color=\"inherit\"\n            onClick={() => {\n              setLoadableScriptOptions(false);\n              return dispatchGetBuildFile({ build: buildTime, type: 'yaml', label: buildTime });\n              // return setScriptViewerModalOpen(true);\n            }}\n          >\n            View docker-compose.yml\n          </Button>\n        </Box>\n        <Box display=\"flex\" p={2} justifyContent=\"center\">\n          <Button\n            variant=\"contained\"\n            className={styles.docsLink}\n            style={{ textTransform: 'none' }}\n            color=\"inherit\"\n            onClick={() => {\n              return dispatchDeleteBuild({ build: buildTime });\n            }}\n          >\n            Delete Build\n          </Button>\n        </Box>\n      </Box>\n    )\n  };\n\n  const errorComponent = () => {\n    return (\n      <Fragment>\n        <div>Error loading: {buildTime}</div>\n        <div>Try refreshing, and ensuring the API server is running correctly.</div>\n      </Fragment>\n    )\n  };\n\n  const loadingComponent = () => {\n    return (\n      <Fragment>\n        Loading '{buildTime}' details...\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Skeleton height={'6rem'} width={'80%'} variant=\"text\" />\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\" m={1} p={1} >\n          <Skeleton variant=\"circle\" width={120} height={120} />\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Skeleton height={'3rem'} width={'70%'} variant=\"text\" />\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Skeleton height={'4rem'} width={'90%'} variant=\"text\" />\n        </Box>\n      </Fragment>\n    )\n  };\n\n  return (\n    <Fragment>\n      <ScriptViewerModal\n        isOpen={scriptViewerModalOpen}\n        handleClose={() => setScriptViewerModalOpen(false)}\n        displayScript={displayScript}\n        scriptTitle={`docker-compose.yml for build: '${buildTime}'`}\n        showActionButton={loadableScriptOptions}\n        actionButtonText={'Load build'}\n        actionButtonFunction={loadBuild}\n      />\n      <Box\n        className={`${styles.serviceCard} ${classes.serviceCard}`}\n        borderRadius=\"borderRadius\"\n        borderColor=\"primary.main\"\n        bgcolor=\"background.paper\"\n        margin={1}\n        border={1}\n      >\n        {isLoading\n        && (loadingComponent())}\n        {!isLoading\n        && buildTime\n        && (\n          buildHistoryComponent()\n        )}\n        {!isLoading\n        && buildHistoryError.hasError === true\n        && (\n          errorComponent()\n        )}\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default ServiceItem;\n","/usr/iotstack_wui/src/actions/downloadBuild.action.js",[],"/usr/iotstack_wui/src/features/serviceConfigModal/index.jsx",["302","303","304","305"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport Grid from '@material-ui/core/Grid';\nimport Button from \"@material-ui/core/Button\";\nimport Box from '@material-ui/core/Box';\nimport getConfigComponents from '../../utils/configOptionLoader';\nimport {\n  deleteTemporaryBuildOptions\n} from '../../utils/buildOptionSync';\n\nconst getModalStyle = () => {\n  const top = 10;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    maxHeight: '75%',\n    overflow: 'hidden',\n    overflowY: 'scroll',\n    transform: `translate(-50%, 0%)`,\n  };\n};\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: '50%',\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nconst ServiceConfigModal = (props) => {\n  const {\n    isOpen,\n    handleClose,\n    serviceName,\n    networkTemplateList,\n    serviceMetadata,\n    serviceConfigOptions,\n    buildOptions,\n    serviceTemplates,\n    setBuildOptions,\n    getBuildOptions,\n    buildOptionsInit,\n    setServiceOptions,\n    setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    setupTemporaryBuildOptions,\n    saveTemporaryBuildOptions\n  } = props;\n\n  const closeModal = (event) => {\n    deleteTemporaryBuildOptions();\n    if (typeof handleClose === 'function') {\n      handleClose(event);\n    }\n  }\n\n  const resetDefaults = (evt) => {\n    const currentBuildOptions = getBuildOptions();\n    delete currentBuildOptions?.services[serviceName];\n    setBuildOptions(currentBuildOptions);\n    closeModal(evt);\n  };\n\n  const classes = useStyles();\n  const [modalStyle] = React.useState(getModalStyle);\n  const body = (\n    <div style={modalStyle} className={classes.paper}>\n      <h2 id=\"simple-modal-title\">{serviceMetadata ? serviceMetadata.displayName : ''} ({serviceName}) Configuration</h2>\n      <Fragment>\n        {getConfigComponents(serviceConfigOptions ?? []).map((ConfigComponent, index) => {\n          return (\n            <Box\n              key={index}\n              mt=\"2rem\"\n              mb=\"2rem\"\n              p={2}\n              borderRadius=\"borderRadius\"\n              border={1}\n              borderColor=\"grey.500\"\n            >\n              <ConfigComponent\n                networkTemplateList={networkTemplateList}\n                setBuildOptions={setBuildOptions}\n                setServiceOptions={setServiceOptions}\n                getBuildOptions={getBuildOptions}\n                buildOptionsInit={buildOptionsInit}\n                setTemporaryBuildOptions={setTemporaryBuildOptions}\n                getTemporaryBuildOptions={getTemporaryBuildOptions}\n                setTemporaryServiceOptions={setTemporaryServiceOptions}\n                setupTemporaryBuildOptions={setupTemporaryBuildOptions}\n                saveTemporaryBuildOptions={saveTemporaryBuildOptions}\n                serviceMetadata={serviceMetadata}\n                serviceName={serviceName}\n                serviceConfigOptions={serviceConfigOptions}\n                serviceTemplates={serviceTemplates}\n              />\n            </Box>\n          );\n        })}\n        <Box pt={\"1rem\"}>\n          <Grid container item xs={12} spacing={3} >\n            <Grid item xs={7} md={4}>\n              <Button variant=\"contained\" onClick={(evt) => { saveTemporaryBuildOptions(); closeModal(evt); }}>Save and Close</Button>\n            </Grid>\n            <Grid item xs={7} md={4}>\n              <Button variant=\"contained\" onClick={(evt) => { closeModal(evt); }}>Cancel and Close</Button>\n            </Grid>\n            {/* <Grid item xs={7} md={4}>\n              <Button variant=\"contained\" onClick={(evt) => { resetDefaults(evt); }}>Reset to Default</Button>\n            </Grid> */}\n          </Grid>\n        </Box>\n      </Fragment>\n      <ServiceConfigModal />\n    </div>\n  );\n\n  return (\n    <Modal\n      open={isOpen || false}\n      onClose={closeModal}\n      aria-labelledby=\"simple-modal-title\"\n      aria-describedby=\"simple-modal-description\"\n    >\n      {body}\n    </Modal>\n  );\n};\n\nexport default ServiceConfigModal;","/usr/iotstack_wui/src/features/buildCompletedModal/index.jsx",[],"/usr/iotstack_wui/src/utils/configOptionLoader.jsx",[],"/usr/iotstack_wui/src/features/serviceUiControls/index.js",["306"],"import PortConfig from './general/portConfig';\nimport NetworkConfig from './general/networkConfig';\nimport Logging from './general/logging';\nimport Volumes from './general/volumesConfig';\nimport Devices from './general/devicesConfig';\nimport Environment from './general/environmentConfig';\nimport DeconzDevices from './custom/deconz-devices';\nimport NodeRedNpm from './custom/nodered-npm';\n\nexport default {\n  PortConfig,\n  NetworkConfig,\n  Logging,\n  Volumes,\n  Devices,\n  Environment,\n  DeconzDevices,\n  NodeRedNpm\n};\n","/usr/iotstack_wui/src/features/serviceUiControls/custom/deconz-devices.js",["307","308","309","310","311","312"],"import React, { Fragment, useState, useEffect } from 'react';\n// import Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Box from '@material-ui/core/Box';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\nconst deconzDeviceList = [ // TODO: look into moving this to the API.\n  {\n    key: '/dev/ttyUSB0',\n    value: '/dev/ttyUSB0'\n  },\n  {\n    key: '/dev/ttyACM0',\n    value: '/dev/ttyACM0'\n  },\n  {\n    key: '/dev/ttyAMA0',\n    value: '/dev/ttyAMA0'\n  },\n  {\n    key: '/dev/ttyS0',\n    value: '/dev/ttyS0'\n  },\n  {\n    key: 'None',\n    value: 'none'\n  }\n];\n\nconst DeconzDevices = (props) => {\n  const {\n    // serviceConfigOptions,\n    serviceName,\n    // setBuildOptions,\n    getBuildOptions,\n    // buildOptionsInit,\n    // setServiceOptions,\n    networkTemplateList,\n    // setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    // setupTemporaryBuildOptions,\n    // saveTemporaryBuildOptions,\n    serviceTemplates,\n    onChange\n  } = props;\n\n  // const tempBuildOptions = getTemporaryBuildOptions();\n  const [selectedDevice, setSelectedDevice] = useState('none');\n\n  useEffect(() => {\n    const savedSelectedDevice = getBuildOptions()?.services?.[serviceName]?.selectedDevice ?? 'none';\n    setSelectedDevice(savedSelectedDevice);\n  }, []);\n\n  useEffect(() => {\n    setTemporaryServiceOptions(serviceName, {\n      ...getTemporaryBuildOptions()?.services?.[serviceName] ?? {},\n      selectedDevice: selectedDevice\n    });\n  }, [\n    selectedDevice\n  ]);\n\n  const onChangeCb = (event) => {\n    const newDevice = event.target.value;\n    setSelectedDevice(newDevice);\n    if (typeof(onChange) === 'function') {\n      onChange(event);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Box>\n        Deconz Hardware:\n      </Box>\n      <Grid container spacing={3} justify=\"space-between\">\n        <Grid item>\n          <Box m={1} mr={1}>\n            <Box m={1} display=\"inline\">Select Device:</Box>\n            <Select\n              labelId=\"deconz-hw-select-label\"\n              id=\"deconz-hw-select\"\n              value={selectedDevice}\n              onChange={(evt) => onChangeCb(evt)}\n            >\n              {deconzDeviceList.map((deconzDevice) => {\n                return (\n                  <MenuItem key={deconzDevice.key} value={deconzDevice.value}>{deconzDevice.key}</MenuItem>\n                );\n              })}\n            </Select>\n          </Box>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default DeconzDevices;\n","/usr/iotstack_wui/src/features/serviceUiControls/general/portConfig.jsx",["313"],"import React, { Fragment, useState, useEffect } from 'react';\n// import Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport {\n  getExternalPort,\n  replaceExternalPort,\n  getInternalPort\n} from '../../../utils/parsers';\n\nconst PortConfig = (props) => {\n\n  const {\n    serviceConfigOptions,\n    serviceName,\n    // setBuildOptions,\n    getBuildOptions,\n    // buildOptionsInit,\n    // setServiceOptions,\n    // setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    // setupTemporaryBuildOptions,\n    // saveTemporaryBuildOptions,\n    serviceTemplates,\n    onChange\n  } = props;\n\n  const tempBuildOptions = getTemporaryBuildOptions();\n\n  const [portSettings, setPortSettings] = useState(getBuildOptions()?.services?.[serviceName]?.ports || {});\n  useEffect(() => {\n    setTemporaryServiceOptions(serviceName, {\n      ...getTemporaryBuildOptions()?.services?.[serviceName] ?? {},\n      ports: portSettings\n    });\n  }, [\n    portSettings\n  ]);\n\n  const onChangeCb = (portKey, portLabelValue, event) => {\n    const newPort = event.target.value;\n    // const defaultTemplatePort = defaultValue(portKey, portKey);\n    setPortSettings({\n      ...portSettings,\n      [portKey]: replaceExternalPort((portSettings[portKey] || portKey), newPort)\n    });\n    if (typeof(onChange) === 'function') {\n      onChange(portKey, portLabelValue, newPort);\n    }\n  };\n\n  const defaultValue = (portValueKey, defaultValue) => {\n    const servicePorts = tempBuildOptions?.services?.[serviceName] ?? {};\n    return servicePorts?.ports?.[portValueKey] ?? defaultValue;\n  };\n\n  return (\n    <Fragment>\n      <Grid container spacing={3}>\n        {serviceConfigOptions && Object.keys(serviceConfigOptions.labeledPorts).map((portValueKey) => {\n          const currentPortSetting = portSettings[portValueKey] || defaultValue(portValueKey, portValueKey);\n          if ((serviceTemplates[serviceName]?.ports?.[portValueKey] ?? []).indexOf(portValueKey)) { // Only show ports that exist in the YAML template\n            return (\n              <Grid\n                item\n                xs={12}\n                md={6}\n                lg={3}\n                key={serviceConfigOptions.labeledPorts[portValueKey]}\n              >\n                <TextField\n                  id={`portConfig_${serviceConfigOptions.labeledPorts[portValueKey]}`}\n                  label={`Port: ${serviceConfigOptions.labeledPorts[portValueKey]} (${getInternalPort(defaultValue(portValueKey, portValueKey))})`}\n                  onChange={(event) => { onChangeCb(portValueKey, serviceConfigOptions.labeledPorts[portValueKey], event) }}\n                  value={getExternalPort(currentPortSetting)}\n                />\n              </Grid>\n            );\n          }\n\n          return null;\n        }).filter((ele) => {\n          return ele !== null;\n        })}\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default PortConfig;\n","/usr/iotstack_wui/src/features/serviceUiControls/general/networkConfig.jsx",["314","315","316"],"/usr/iotstack_wui/src/features/serviceUiControls/general/logging.jsx",["317"],"import React, { Fragment, useState, useEffect } from 'react';\n// import Box from '@material-ui/core/Box';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Box from '@material-ui/core/Box';\n\nconst PortConfig = (props) => {\n\n  const {\n    // serviceConfigOptions,\n    serviceName,\n    // setBuildOptions,\n    getBuildOptions,\n    // buildOptionsInit,\n    // setServiceOptions,\n    // setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    // setupTemporaryBuildOptions,\n    // saveTemporaryBuildOptions,\n    // serviceTemplates,\n    onChange\n  } = props;\n\n  // const tempBuildOptions = getTemporaryBuildOptions();\n\n  const [loggingEnabled, setLoggingEnabled] = useState(getBuildOptions()?.services?.[serviceName]?.loggingEnabled ?? true);\n  useEffect(() => {\n    setTemporaryServiceOptions(serviceName, {\n      ...getTemporaryBuildOptions()?.services?.[serviceName] ?? {},\n      loggingEnabled\n    });\n  }, [\n    loggingEnabled\n  ]);\n\n  const onChangeCb = (event) => {\n    const newSetting = event.target.checked;\n    setLoggingEnabled(newSetting);\n    if (typeof(onChange) === 'function') {\n      onChange(newSetting);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Box>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={loggingEnabled}\n              onChange={(evt) => onChangeCb(evt) }\n              name={\"logging\"}\n              color=\"primary\"\n            />\n          }\n          label={`Enable Logging for ${serviceName}`}\n        />\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default PortConfig;\n","/usr/iotstack_wui/src/features/serviceUiControls/general/volumesConfig.jsx",["318","319"],"import React, { Fragment, useState, useEffect } from 'react';\n// import Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport {\n  getExternalVolume,\n  getInternalVolume,\n  replaceExternalVolume\n} from '../../../utils/parsers';\n\nconst VolumesConfig = (props) => {\n\n  const {\n    // serviceConfigOptions,\n    serviceName,\n    // setBuildOptions,\n    getBuildOptions,\n    // buildOptionsInit,\n    // setServiceOptions,\n    // setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    // setupTemporaryBuildOptions,\n    // saveTemporaryBuildOptions,\n    serviceTemplates,\n    onChange\n  } = props;\n\n  const tempBuildOptions = getTemporaryBuildOptions();\n  const yamlVolumeSettings = serviceTemplates?.[serviceName]?.volumes || [];\n\n  const [volumeSettings, setVolumeSettings] = useState(yamlVolumeSettings);\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    if ((getBuildOptions().services?.[serviceName]?.volumes?.length ?? 0) < 1 ) {\n      setTemporaryServiceOptions(serviceName, {\n        ...getBuildOptions().services?.[serviceName] ?? {},\n        volumes: yamlVolumeSettings\n      });\n    } else {\n      setVolumeSettings(getBuildOptions().services?.[serviceName]?.volumes);\n    }\n    setLoaded(true);\n  }, []);\n\n  useEffect(() => {\n    if (loaded) {\n      setTemporaryServiceOptions(serviceName, {\n        ...tempBuildOptions?.services?.[serviceName] ?? {},\n        volumes: volumeSettings\n      });\n    }\n  }, [\n    volumeSettings\n  ]);\n\n  const onChangeCb = (internalVolume, event) => {\n    const newExternalVolumePath = event.target.value;\n    const temporaryVolumes = [...volumeSettings];\n    \n    const volumeIndex = temporaryVolumes.findIndex((index) => {\n      return getInternalVolume(index) === internalVolume;\n    });\n    \n    if (volumeIndex > -1) {\n      temporaryVolumes[volumeIndex] = replaceExternalVolume(temporaryVolumes[volumeIndex], newExternalVolumePath);\n    }\n\n    setVolumeSettings(temporaryVolumes);\n    if (typeof(onChange) === 'function') {\n      onChange(internalVolume, newExternalVolumePath);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Grid container spacing={4}>\n        {volumeSettings.map((volume) => {\n          const internalVolume = getInternalVolume(volume);\n          const currentExternalVolume = getExternalVolume(volume);\n\n          return (\n            <Grid\n              item\n              xs={12}\n              md={12}\n              lg={6}\n              xl={5}\n              key={internalVolume}\n            >\n              <TextField\n                id={`volumeConfig_${internalVolume}`}\n                label={`Vol: ${internalVolume} ${currentExternalVolume === '' ? '(Deleted)' : ''}`}\n                onChange={(event) => { onChangeCb(internalVolume, event) }}\n                value={currentExternalVolume}\n                style={{ width: '100%' }}\n              />\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default VolumesConfig;\n","/usr/iotstack_wui/src/features/serviceUiControls/general/devicesConfig.jsx",["320","321"],"import React, { Fragment, useState, useEffect } from 'react';\n// import Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nconst DevicessConfig = (props) => {\n\n  const {\n    // serviceConfigOptions,\n    serviceName,\n    // setBuildOptions,\n    getBuildOptions,\n    // buildOptionsInit,\n    // setServiceOptions,\n    // setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    // setupTemporaryBuildOptions,\n    // saveTemporaryBuildOptions,\n    serviceTemplates,\n    onChange\n  } = props;\n\n  const tempBuildOptions = getTemporaryBuildOptions();\n  const yamlDevicesSettings = serviceTemplates?.[serviceName]?.devices || [];\n\n  const [devicesSettings, setDevicesSettings] = useState(yamlDevicesSettings);\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    if ((getBuildOptions().services?.[serviceName]?.devices?.length ?? 0) < 1 ) {\n      setTemporaryServiceOptions(serviceName, {\n        ...getBuildOptions().services?.[serviceName] ?? {},\n        devices: yamlDevicesSettings\n      });\n    } else {\n      setDevicesSettings(getBuildOptions().services?.[serviceName]?.devices);\n    }\n    setLoaded(true);\n  }, []);\n\n  useEffect(() => {\n    if (loaded) {\n      setTemporaryServiceOptions(serviceName, {\n        ...tempBuildOptions?.services?.[serviceName] ?? {},\n        devices: devicesSettings\n      });\n    }\n  }, [\n    devicesSettings\n  ]);\n\n  const onChangeCb = (oldDevice, event) => {\n    const newDevice = event.target.value;\n    const temporaryDevices = [...devicesSettings];\n    \n    const devicesIndex = temporaryDevices.findIndex((device) => {\n      return oldDevice === device;\n    });\n\n    if (devicesIndex > -1) {\n      temporaryDevices[devicesIndex] = newDevice;\n    }\n\n    setDevicesSettings(temporaryDevices);\n    if (typeof(onChange) === 'function') {\n      onChange(oldDevice, newDevice);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Grid container spacing={3}>\n        {devicesSettings.map((device, index) => {\n\n          return (\n            <Grid\n              item\n              xs={12}\n              md={12}\n              lg={5}\n              xl={4}\n              key={index}\n            >\n              <TextField\n                id={`devicesConfig_${device}`}\n                label={`devices: ${device === '' ? '(Deleted)' : ''}`}\n                onChange={(event) => { onChangeCb(device, event) }}\n                value={device}\n                style={{ width: '100%' }}\n              />\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default DevicessConfig;\n","/usr/iotstack_wui/src/features/serviceUiControls/general/environmentConfig.jsx",["322","323"],"/usr/iotstack_wui/src/utils/parsers.js",[],"/usr/iotstack_wui/src/features/scriptViewerModal/index.jsx",[],"/usr/iotstack_wui/src/reducers/getBuildFileReducer.js",[],"/usr/iotstack_wui/src/actions/getBuildFile.action.js",[],"/usr/iotstack_wui/src/actions/deleteBuild.action.js",[],"/usr/iotstack_wui/src/reducers/getDeleteBuildReducer.js",[],"/usr/iotstack_wui/src/features/serviceUiControls/custom/nodered-npm.js",["324","325","326","327","328","329"],"import React, { Fragment, useState, useEffect } from 'react';\n// import Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Box from '@material-ui/core/Box';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport Link from '@material-ui/core/Link';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\nconst NodeRedNpm = (props) => {\n  const {\n    serviceConfigOptions,\n    serviceName,\n    // setBuildOptions,\n    getBuildOptions,\n    // buildOptionsInit,\n    // setServiceOptions,\n    networkTemplateList,\n    // setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    // setupTemporaryBuildOptions,\n    // saveTemporaryBuildOptions,\n    serviceTemplates,\n    onChange\n  } = props;\n\n  const [selectedModules, setSelectedModules] = useState([]);\n  const [showNonEssential, setShowNonEssential] = useState(false);\n  const addons = serviceConfigOptions?.nodered_npmSelection ?? {};\n\n  useEffect(() => {\n    const savedSelectedModules = getBuildOptions()?.services?.[serviceName]?.addonsList ?? false;\n    const defaultSelectedModules = addons?.defaultOn ?? [];\n    const useSelectedModules = Array.isArray(savedSelectedModules) ? savedSelectedModules : defaultSelectedModules;\n    setSelectedModules(useSelectedModules);\n  }, []);\n\n  useEffect(() => {\n    setTemporaryServiceOptions(serviceName, {\n      ...getTemporaryBuildOptions()?.services?.[serviceName] ?? {},\n      addonsList: selectedModules\n    });\n  }, [\n    selectedModules\n  ]);\n\n  const onChangeCb = (event, moduleName) => {\n    const indexOfModule = selectedModules.indexOf(moduleName);\n    const newModulesList = [...selectedModules];\n\n    if (indexOfModule > -1) {\n      newModulesList.splice(indexOfModule, 1);\n    } else {\n      newModulesList.push(moduleName);\n    }\n\n    setSelectedModules(newModulesList);\n    if (typeof(onChange) === 'function') {\n      onChange(event, moduleName);\n    }\n  };\n\n  const sortAddons = ({ defaultOn, defaultOff, essentials }) => {\n    const combinedList = [\n      ...defaultOn,\n      ...defaultOff\n    ];\n    combinedList.sort();\n\n    const essentialsList = [];\n    const nonEssentialList = [];\n\n    combinedList.forEach((moduleName) => {\n      if (essentials.includes(moduleName)) {\n        essentialsList.push(moduleName);\n      } else {\n        nonEssentialList.push(moduleName);\n      }\n    });\n    return { combinedList, essentialsList, nonEssentialList };\n  };\n\n  return (\n    <Fragment>\n      <Box>\n        Initial NodeRed Plugins:\n      </Box>\n      <Box>\n        Note: After starting NodeRed, you must make any modules changes with <Link href=\"https://nodered.org/docs/user-guide/editor/palette/manager\" target=\"_blank\">NodeRed's Pallete Menu</Link>.\n      </Box>\n      \n      <Box m={1}>\n        <Grid container spacing={1} justify=\"space-evenly\">\n              {sortAddons({ ...addons }).essentialsList.map((npmName) => {\n                return (\n                  <Grid\n                    item\n                    xs={6}\n                    md={6}\n                    lg={4}\n                    xl={4}\n                    key={npmName}\n                  >\n                    <Box mt={1}>\n                      <FormControlLabel\n                        control={\n                          <Checkbox\n                            checked={selectedModules.includes(npmName)}\n                            onChange={(evt) => onChangeCb(evt, npmName) }\n                            name={npmName}\n                            color=\"primary\"\n                          />\n                        }\n                        label={npmName}\n                      />\n                    </Box>\n                  </Grid>\n                )\n              })}\n        </Grid>\n        {showNonEssential\n        && (\n            <Fragment>\n              <Box p={4}>\n                <Divider />\n              </Box>\n              <Grid container spacing={1} justify=\"space-evenly\">\n                {sortAddons({ ...addons }).nonEssentialList.map((npmName) => {\n                  return (\n                    <Grid\n                      item\n                      xs={6}\n                      md={6}\n                      lg={4}\n                      xl={4}\n                      key={npmName}\n                    >\n                      <Box mt={1}>\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={selectedModules.includes(npmName)}\n                              onChange={(evt) => onChangeCb(evt, npmName) }\n                              name={npmName}\n                              color=\"primary\"\n                            />\n                          }\n                          label={npmName}\n                        />\n                      </Box>\n                    </Grid>\n                  )\n                })}\n              </Grid>\n            </Fragment>\n        )}\n        <Box p={2} pt={4}>\n          <Button variant=\"contained\" onClick={() => {\n            return setShowNonEssential(!showNonEssential);\n          }}>{showNonEssential ? 'Hide' : 'Show'} Non-essential npm modules</Button>\n        </Box>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default NodeRedNpm;\n",{"ruleId":"330","replacedBy":"331"},{"ruleId":"332","replacedBy":"333"},{"ruleId":"334","severity":1,"message":"335","line":33,"column":5,"nodeType":"336","messageId":"337","endLine":33,"endColumn":36},{"ruleId":"338","severity":1,"message":"339","line":87,"column":6,"nodeType":"340","endLine":87,"endColumn":8,"suggestions":"341"},{"ruleId":"342","severity":1,"message":"343","line":93,"column":43,"nodeType":"344","messageId":"345","endLine":93,"endColumn":45},{"ruleId":"338","severity":1,"message":"346","line":97,"column":6,"nodeType":"340","endLine":97,"endColumn":24,"suggestions":"347"},{"ruleId":"338","severity":1,"message":"348","line":52,"column":6,"nodeType":"340","endLine":52,"endColumn":8,"suggestions":"349"},{"ruleId":"338","severity":1,"message":"350","line":56,"column":6,"nodeType":"340","endLine":56,"endColumn":19,"suggestions":"351"},{"ruleId":"352","severity":1,"message":"353","line":60,"column":7,"nodeType":"354","endLine":60,"endColumn":34},{"ruleId":"355","severity":1,"message":"356","line":60,"column":7,"nodeType":"354","endLine":60,"endColumn":34},{"ruleId":"357","severity":1,"message":"358","line":29,"column":3,"nodeType":"359","messageId":"360","endLine":29,"endColumn":28},{"ruleId":"338","severity":1,"message":"361","line":135,"column":6,"nodeType":"340","endLine":138,"endColumn":4,"suggestions":"362"},{"ruleId":"338","severity":1,"message":"363","line":146,"column":6,"nodeType":"340","endLine":151,"endColumn":4,"suggestions":"364"},{"ruleId":"352","severity":1,"message":"353","line":309,"column":7,"nodeType":"354","endLine":309,"endColumn":34},{"ruleId":"355","severity":1,"message":"356","line":309,"column":7,"nodeType":"354","endLine":309,"endColumn":34},{"ruleId":"338","severity":1,"message":"365","line":78,"column":6,"nodeType":"340","endLine":78,"endColumn":57,"suggestions":"366"},{"ruleId":"338","severity":1,"message":"367","line":78,"column":7,"nodeType":"368","endLine":78,"endColumn":56},{"ruleId":"342","severity":1,"message":"343","line":91,"column":50,"nodeType":"344","messageId":"345","endLine":91,"endColumn":52},{"ruleId":"357","severity":1,"message":"369","line":1,"column":27,"nodeType":"359","messageId":"360","endLine":1,"endColumn":35},{"ruleId":"357","severity":1,"message":"370","line":1,"column":37,"nodeType":"359","messageId":"360","endLine":1,"endColumn":46},{"ruleId":"357","severity":1,"message":"371","line":45,"column":5,"nodeType":"359","messageId":"360","endLine":45,"endColumn":17},{"ruleId":"357","severity":1,"message":"372","line":65,"column":9,"nodeType":"359","messageId":"360","endLine":65,"endColumn":22},{"ruleId":"373","severity":1,"message":"374","line":10,"column":1,"nodeType":"375","endLine":19,"endColumn":3},{"ruleId":"357","severity":1,"message":"376","line":4,"column":8,"nodeType":"359","messageId":"360","endLine":4,"endColumn":24},{"ruleId":"357","severity":1,"message":"377","line":5,"column":8,"nodeType":"359","messageId":"360","endLine":5,"endColumn":16},{"ruleId":"357","severity":1,"message":"378","line":41,"column":5,"nodeType":"359","messageId":"360","endLine":41,"endColumn":24},{"ruleId":"357","severity":1,"message":"379","line":47,"column":5,"nodeType":"359","messageId":"360","endLine":47,"endColumn":21},{"ruleId":"338","severity":1,"message":"380","line":57,"column":6,"nodeType":"340","endLine":57,"endColumn":8,"suggestions":"381"},{"ruleId":"338","severity":1,"message":"382","line":64,"column":6,"nodeType":"340","endLine":66,"endColumn":4,"suggestions":"383"},{"ruleId":"338","severity":1,"message":"382","line":37,"column":6,"nodeType":"340","endLine":39,"endColumn":4,"suggestions":"384"},{"ruleId":"338","severity":1,"message":"385","line":43,"column":6,"nodeType":"340","endLine":43,"endColumn":8,"suggestions":"386"},{"ruleId":"338","severity":1,"message":"382","line":50,"column":6,"nodeType":"340","endLine":52,"endColumn":4,"suggestions":"387"},{"ruleId":"338","severity":1,"message":"382","line":59,"column":6,"nodeType":"340","endLine":61,"endColumn":4,"suggestions":"388"},{"ruleId":"338","severity":1,"message":"382","line":33,"column":6,"nodeType":"340","endLine":35,"endColumn":4,"suggestions":"389"},{"ruleId":"338","severity":1,"message":"390","line":44,"column":6,"nodeType":"340","endLine":44,"endColumn":8,"suggestions":"391"},{"ruleId":"338","severity":1,"message":"392","line":53,"column":6,"nodeType":"340","endLine":55,"endColumn":4,"suggestions":"393"},{"ruleId":"338","severity":1,"message":"394","line":39,"column":6,"nodeType":"340","endLine":39,"endColumn":8,"suggestions":"395"},{"ruleId":"338","severity":1,"message":"392","line":48,"column":6,"nodeType":"340","endLine":50,"endColumn":4,"suggestions":"396"},{"ruleId":"338","severity":1,"message":"397","line":59,"column":6,"nodeType":"340","endLine":59,"endColumn":8,"suggestions":"398"},{"ruleId":"338","severity":1,"message":"392","line":68,"column":6,"nodeType":"340","endLine":70,"endColumn":4,"suggestions":"399"},{"ruleId":"357","severity":1,"message":"400","line":10,"column":8,"nodeType":"359","messageId":"360","endLine":10,"endColumn":16},{"ruleId":"357","severity":1,"message":"401","line":11,"column":8,"nodeType":"359","messageId":"360","endLine":11,"endColumn":14},{"ruleId":"357","severity":1,"message":"378","line":21,"column":5,"nodeType":"359","messageId":"360","endLine":21,"endColumn":24},{"ruleId":"357","severity":1,"message":"379","line":27,"column":5,"nodeType":"359","messageId":"360","endLine":27,"endColumn":21},{"ruleId":"338","severity":1,"message":"402","line":40,"column":6,"nodeType":"340","endLine":40,"endColumn":8,"suggestions":"403"},{"ruleId":"338","severity":1,"message":"382","line":47,"column":6,"nodeType":"340","endLine":49,"endColumn":4,"suggestions":"404"},"no-native-reassign",["405"],"no-negated-in-lhs",["406"],"no-dupe-keys","Duplicate key 'dispatchGetServiceTemplatesList'.","ObjectExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatchClearAllSelectedServices', 'dispatchGetAllServicesConfigOptions', 'dispatchGetAllServicesMetadata', 'dispatchGetNetworkTemplatesList', 'dispatchGetServiceTemplates', and 'dispatchGetServiceTemplatesList'. Either include them or remove the dependency array.","ArrayExpression",["407"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'dispatchAddSelectedService' and 'isLoading'. Either include them or remove the dependency array.",["408"],"React Hook useEffect has missing dependencies: 'dispatchClearBuildState' and 'dispatchGetBuildHistoryList'. Either include them or remove the dependency array.",["409"],"React Hook useEffect has a missing dependency: 'dispatchGetBuildHistoryList'. Either include it or remove the dependency array.",["410"],"jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-unused-vars","'getSelectedItems_services' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'serviceName'. Either include it or remove the dependency array.",["411"],"React Hook useEffect has a missing dependency: 'getBuildOptions'. Either include it or remove the dependency array.",["412"],"React Hook useEffect has missing dependencies: 'buildFiles?.files?.completed' and 'buildTime'. Either include them or remove the dependency array.",["413"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","ChainExpression","'useState' is defined but never used.","'useEffect' is defined but never used.","'buildOptions' is assigned a value but never used.","'resetDefaults' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'networkTemplateList' is assigned a value but never used.","'serviceTemplates' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getBuildOptions' and 'serviceName'. Either include them or remove the dependency array.",["414"],"React Hook useEffect has missing dependencies: 'getTemporaryBuildOptions', 'serviceName', and 'setTemporaryServiceOptions'. Either include them or remove the dependency array.",["415"],["416"],"React Hook useEffect has missing dependencies: 'getBuildOptions', 'serviceName', and 'serviceTemplates'. Either include them or remove the dependency array.",["417"],["418"],["419"],["420"],"React Hook useEffect has missing dependencies: 'getBuildOptions', 'serviceName', 'setTemporaryServiceOptions', and 'yamlVolumeSettings'. Either include them or remove the dependency array.",["421"],"React Hook useEffect has missing dependencies: 'loaded', 'serviceName', 'setTemporaryServiceOptions', and 'tempBuildOptions?.services'. Either include them or remove the dependency array.",["422"],"React Hook useEffect has missing dependencies: 'getBuildOptions', 'serviceName', 'setTemporaryServiceOptions', and 'yamlDevicesSettings'. Either include them or remove the dependency array.",["423"],["424"],"React Hook useEffect has missing dependencies: 'getBuildOptions', 'serviceConfigOptions?.modifyableEnvironment', 'serviceName', 'setTemporaryServiceOptions', and 'yamlEnvironmentSettings'. Either include them or remove the dependency array.",["425"],["426"],"'MenuItem' is defined but never used.","'Select' is defined but never used.","React Hook useEffect has missing dependencies: 'addons?.defaultOn', 'getBuildOptions', and 'serviceName'. Either include them or remove the dependency array.",["427"],["428"],"no-global-assign","no-unsafe-negation",{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"desc":"447","fix":"448"},{"desc":"449","fix":"450"},{"desc":"451","fix":"452"},{"desc":"453","fix":"454"},{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},"Update the dependencies array to be: [dispatchClearAllSelectedServices, dispatchGetAllServicesConfigOptions, dispatchGetAllServicesMetadata, dispatchGetNetworkTemplatesList, dispatchGetServiceTemplates, dispatchGetServiceTemplatesList]",{"range":"473","text":"474"},"Update the dependencies array to be: [dispatchAddSelectedService, isLoading, selectedServices]",{"range":"475","text":"476"},"Update the dependencies array to be: [dispatchClearBuildState, dispatchGetBuildHistoryList]",{"range":"477","text":"478"},"Update the dependencies array to be: [deleteBuild, dispatchGetBuildHistoryList]",{"range":"479","text":"480"},"Update the dependencies array to be: [allServicesMetadataReducer, allServicesConfigOptionsReducer, serviceName]",{"range":"481","text":"482"},"Update the dependencies array to be: [updated, serviceName, selectedServices.selectedServices, dispatchGetBuildIssues, getBuildOptions]",{"range":"483","text":"484"},"Update the dependencies array to be: [buildFiles?.files?.completed, buildTime]",{"range":"485","text":"486"},"Update the dependencies array to be: [getBuildOptions, serviceName]",{"range":"487","text":"488"},"Update the dependencies array to be: [getTemporaryBuildOptions, selectedDevice, serviceName, setTemporaryServiceOptions]",{"range":"489","text":"490"},"Update the dependencies array to be: [getTemporaryBuildOptions, portSettings, serviceName, setTemporaryServiceOptions]",{"range":"491","text":"492"},"Update the dependencies array to be: [getBuildOptions, serviceName, serviceTemplates]",{"range":"493","text":"494"},"Update the dependencies array to be: [getTemporaryBuildOptions, modifiedNetworkList, serviceName, setTemporaryServiceOptions]",{"range":"495","text":"496"},"Update the dependencies array to be: [getTemporaryBuildOptions, networkMode, serviceName, setTemporaryServiceOptions]",{"range":"497","text":"498"},"Update the dependencies array to be: [getTemporaryBuildOptions, loggingEnabled, serviceName, setTemporaryServiceOptions]",{"range":"499","text":"500"},"Update the dependencies array to be: [getBuildOptions, serviceName, setTemporaryServiceOptions, yamlVolumeSettings]",{"range":"501","text":"502"},"Update the dependencies array to be: [loaded, serviceName, setTemporaryServiceOptions, tempBuildOptions?.services, volumeSettings]",{"range":"503","text":"504"},"Update the dependencies array to be: [getBuildOptions, serviceName, setTemporaryServiceOptions, yamlDevicesSettings]",{"range":"505","text":"506"},"Update the dependencies array to be: [devicesSettings, loaded, serviceName, setTemporaryServiceOptions, tempBuildOptions?.services]",{"range":"507","text":"508"},"Update the dependencies array to be: [getBuildOptions, serviceConfigOptions?.modifyableEnvironment, serviceName, setTemporaryServiceOptions, yamlEnvironmentSettings]",{"range":"509","text":"510"},"Update the dependencies array to be: [environmentSettings, loaded, serviceName, setTemporaryServiceOptions, tempBuildOptions?.services]",{"range":"511","text":"512"},"Update the dependencies array to be: [addons?.defaultOn, getBuildOptions, serviceName]",{"range":"513","text":"514"},"Update the dependencies array to be: [getTemporaryBuildOptions, selectedModules, serviceName, setTemporaryServiceOptions]",{"range":"515","text":"516"},[3462,3464],"[dispatchClearAllSelectedServices, dispatchGetAllServicesConfigOptions, dispatchGetAllServicesMetadata, dispatchGetNetworkTemplatesList, dispatchGetServiceTemplates, dispatchGetServiceTemplatesList]",[3713,3731],"[dispatchAddSelectedService, isLoading, selectedServices]",[1448,1450],"[dispatchClearBuildState, dispatchGetBuildHistoryList]",[1514,1527],"[deleteBuild, dispatchGetBuildHistoryList]",[4543,4616],"[allServicesMetadataReducer, allServicesConfigOptionsReducer, serviceName]",[4830,4931],"[updated, serviceName, selectedServices.selectedServices, dispatchGetBuildIssues, getBuildOptions]",[2810,2861],"[buildFiles?.files?.completed, buildTime]",[1479,1481],"[getBuildOptions, serviceName]",[1669,1693],"[getTemporaryBuildOptions, selectedDevice, serviceName, setTemporaryServiceOptions]",[1038,1060],"[getTemporaryBuildOptions, portSettings, serviceName, setTemporaryServiceOptions]",[1528,1530],"[getBuildOptions, serviceName, serviceTemplates]",[1717,1746],"[getTemporaryBuildOptions, modifiedNetworkList, serviceName, setTemporaryServiceOptions]",[1928,1949],"[getTemporaryBuildOptions, networkMode, serviceName, setTemporaryServiceOptions]",[1018,1042],"[getTemporaryBuildOptions, loggingEnabled, serviceName, setTemporaryServiceOptions]",[1346,1348],"[getBuildOptions, serviceName, setTemporaryServiceOptions, yamlVolumeSettings]",[1551,1575],"[loaded, serviceName, setTemporaryServiceOptions, tempBuildOptions?.services, volumeSettings]",[1245,1247],"[getBuildOptions, serviceName, setTemporaryServiceOptions, yamlDevicesSettings]",[1451,1476],"[devicesSettings, loaded, serviceName, setTemporaryServiceOptions, tempBuildOptions?.services]",[1954,1956],"[getBuildOptions, serviceConfigOptions?.modifyableEnvironment, serviceName, setTemporaryServiceOptions, yamlEnvironmentSettings]",[2168,2197],"[environmentSettings, loaded, serviceName, setTemporaryServiceOptions, tempBuildOptions?.services]",[1505,1507],"[addons?.defaultOn, getBuildOptions, serviceName]",[1692,1717],"[getTemporaryBuildOptions, selectedModules, serviceName, setTemporaryServiceOptions]"]